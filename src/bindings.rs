/* automatically generated by rust-bindgen */

pub const _SYS_PTRACE_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 29;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const __TIMESIZE: u32 = 64;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _SYS_USER_H: u32 = 1;

pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t { pub __val: [::std::os::raw::c_int; 2usize] }

#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>(), 8usize, concat!( "Size of: ", stringify!( __fsid_t ) ));
    assert_eq!(::std::mem::align_of::<__fsid_t>(), 4usize, concat!( "Alignment of ", stringify!( __fsid_t ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( __fsid_t ), "::", stringify!( __val ) ));
}

pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;

pub const __ptrace_request_PTRACE_TRACEME: __ptrace_request = 0;
pub const __ptrace_request_PTRACE_PEEKTEXT: __ptrace_request = 1;
pub const __ptrace_request_PTRACE_PEEKDATA: __ptrace_request = 2;
pub const __ptrace_request_PTRACE_PEEKUSER: __ptrace_request = 3;
pub const __ptrace_request_PTRACE_POKETEXT: __ptrace_request = 4;
pub const __ptrace_request_PTRACE_POKEDATA: __ptrace_request = 5;
pub const __ptrace_request_PTRACE_POKEUSER: __ptrace_request = 6;
pub const __ptrace_request_PTRACE_CONT: __ptrace_request = 7;
pub const __ptrace_request_PTRACE_KILL: __ptrace_request = 8;
pub const __ptrace_request_PTRACE_SINGLESTEP: __ptrace_request = 9;
pub const __ptrace_request_PTRACE_GETREGS: __ptrace_request = 12;
pub const __ptrace_request_PTRACE_SETREGS: __ptrace_request = 13;
pub const __ptrace_request_PTRACE_GETFPREGS: __ptrace_request = 14;
pub const __ptrace_request_PTRACE_SETFPREGS: __ptrace_request = 15;
pub const __ptrace_request_PTRACE_ATTACH: __ptrace_request = 16;
pub const __ptrace_request_PTRACE_DETACH: __ptrace_request = 17;
pub const __ptrace_request_PTRACE_GETFPXREGS: __ptrace_request = 18;
pub const __ptrace_request_PTRACE_SETFPXREGS: __ptrace_request = 19;
pub const __ptrace_request_PTRACE_SYSCALL: __ptrace_request = 24;
pub const __ptrace_request_PTRACE_GET_THREAD_AREA: __ptrace_request = 25;
pub const __ptrace_request_PTRACE_SET_THREAD_AREA: __ptrace_request = 26;
pub const __ptrace_request_PTRACE_ARCH_PRCTL: __ptrace_request = 30;
pub const __ptrace_request_PTRACE_SYSEMU: __ptrace_request = 31;
pub const __ptrace_request_PTRACE_SYSEMU_SINGLESTEP: __ptrace_request = 32;
pub const __ptrace_request_PTRACE_SINGLEBLOCK: __ptrace_request = 33;
pub const __ptrace_request_PTRACE_SETOPTIONS: __ptrace_request = 16896;
pub const __ptrace_request_PTRACE_GETEVENTMSG: __ptrace_request = 16897;
pub const __ptrace_request_PTRACE_GETSIGINFO: __ptrace_request = 16898;
pub const __ptrace_request_PTRACE_SETSIGINFO: __ptrace_request = 16899;
pub const __ptrace_request_PTRACE_GETREGSET: __ptrace_request = 16900;
pub const __ptrace_request_PTRACE_SETREGSET: __ptrace_request = 16901;
pub const __ptrace_request_PTRACE_SEIZE: __ptrace_request = 16902;
pub const __ptrace_request_PTRACE_INTERRUPT: __ptrace_request = 16903;
pub const __ptrace_request_PTRACE_LISTEN: __ptrace_request = 16904;
pub const __ptrace_request_PTRACE_PEEKSIGINFO: __ptrace_request = 16905;
pub const __ptrace_request_PTRACE_GETSIGMASK: __ptrace_request = 16906;
pub const __ptrace_request_PTRACE_SETSIGMASK: __ptrace_request = 16907;
pub const __ptrace_request_PTRACE_SECCOMP_GET_FILTER: __ptrace_request = 16908;
pub const __ptrace_request_PTRACE_SECCOMP_GET_METADATA: __ptrace_request = 16909;

pub type __ptrace_request = u32;

pub const __ptrace_setoptions_PTRACE_O_TRACESYSGOOD: __ptrace_setoptions = 1;
pub const __ptrace_setoptions_PTRACE_O_TRACEFORK: __ptrace_setoptions = 2;
pub const __ptrace_setoptions_PTRACE_O_TRACEVFORK: __ptrace_setoptions = 4;
pub const __ptrace_setoptions_PTRACE_O_TRACECLONE: __ptrace_setoptions = 8;
pub const __ptrace_setoptions_PTRACE_O_TRACEEXEC: __ptrace_setoptions = 16;
pub const __ptrace_setoptions_PTRACE_O_TRACEVFORKDONE: __ptrace_setoptions = 32;
pub const __ptrace_setoptions_PTRACE_O_TRACEEXIT: __ptrace_setoptions = 64;
pub const __ptrace_setoptions_PTRACE_O_TRACESECCOMP: __ptrace_setoptions = 128;
pub const __ptrace_setoptions_PTRACE_O_EXITKILL: __ptrace_setoptions = 1048576;
pub const __ptrace_setoptions_PTRACE_O_SUSPEND_SECCOMP: __ptrace_setoptions = 2097152;
pub const __ptrace_setoptions_PTRACE_O_MASK: __ptrace_setoptions = 3145983;

pub type __ptrace_setoptions = u32;

pub const __ptrace_eventcodes_PTRACE_EVENT_FORK: __ptrace_eventcodes = 1;
pub const __ptrace_eventcodes_PTRACE_EVENT_VFORK: __ptrace_eventcodes = 2;
pub const __ptrace_eventcodes_PTRACE_EVENT_CLONE: __ptrace_eventcodes = 3;
pub const __ptrace_eventcodes_PTRACE_EVENT_EXEC: __ptrace_eventcodes = 4;
pub const __ptrace_eventcodes_PTRACE_EVENT_VFORK_DONE: __ptrace_eventcodes = 5;
pub const __ptrace_eventcodes_PTRACE_EVENT_EXIT: __ptrace_eventcodes = 6;
pub const __ptrace_eventcodes_PTRACE_EVENT_SECCOMP: __ptrace_eventcodes = 7;
pub const __ptrace_eventcodes_PTRACE_EVENT_STOP: __ptrace_eventcodes = 128;

pub type __ptrace_eventcodes = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_peeksiginfo_args { pub off: __uint64_t, pub flags: __uint32_t, pub nr: __int32_t }

#[test]
fn bindgen_test_layout___ptrace_peeksiginfo_args() {
    assert_eq!(::std::mem::size_of::<__ptrace_peeksiginfo_args>(), 16usize, concat!( "Size of: ", stringify!( __ptrace_peeksiginfo_args ) ));
    assert_eq!(::std::mem::align_of::<__ptrace_peeksiginfo_args>(), 8usize, concat!( "Alignment of ", stringify!( __ptrace_peeksiginfo_args ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__ptrace_peeksiginfo_args>())).off as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( __ptrace_peeksiginfo_args ), "::", stringify!( off ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__ptrace_peeksiginfo_args>())).flags as *const _ as usize }, 8usize, concat!( "Offset of field: ", stringify!( __ptrace_peeksiginfo_args ), "::", stringify!( flags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__ptrace_peeksiginfo_args>())).nr as *const _ as usize }, 12usize, concat!( "Offset of field: ", stringify!( __ptrace_peeksiginfo_args ), "::", stringify!( nr ) ));
}

pub const __ptrace_peeksiginfo_flags_PTRACE_PEEKSIGINFO_SHARED: __ptrace_peeksiginfo_flags = 1;

pub type __ptrace_peeksiginfo_flags = u32;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __ptrace_seccomp_metadata { pub filter_off: __uint64_t, pub flags: __uint64_t }

#[test]
fn bindgen_test_layout___ptrace_seccomp_metadata() {
    assert_eq!(::std::mem::size_of::<__ptrace_seccomp_metadata>(), 16usize, concat!( "Size of: ", stringify!( __ptrace_seccomp_metadata ) ));
    assert_eq!(::std::mem::align_of::<__ptrace_seccomp_metadata>(), 8usize, concat!( "Alignment of ", stringify!( __ptrace_seccomp_metadata ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__ptrace_seccomp_metadata>())).filter_off as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( __ptrace_seccomp_metadata ), "::", stringify!( filter_off ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<__ptrace_seccomp_metadata>())).flags as *const _ as usize }, 8usize, concat!( "Offset of field: ", stringify!( __ptrace_seccomp_metadata ), "::", stringify!( flags ) ));
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct user_fpregs_struct { pub cwd: ::std::os::raw::c_ushort, pub swd: ::std::os::raw::c_ushort, pub ftw: ::std::os::raw::c_ushort, pub fop: ::std::os::raw::c_ushort, pub rip: ::std::os::raw::c_ulonglong, pub rdp: ::std::os::raw::c_ulonglong, pub mxcsr: ::std::os::raw::c_uint, pub mxcr_mask: ::std::os::raw::c_uint, pub st_space: [::std::os::raw::c_uint; 32usize], pub xmm_space: [::std::os::raw::c_uint; 64usize], pub padding: [::std::os::raw::c_uint; 24usize] }

#[test]
fn bindgen_test_layout_user_fpregs_struct() {
    assert_eq!(::std::mem::size_of::<user_fpregs_struct>(), 512usize, concat!( "Size of: ", stringify!( user_fpregs_struct ) ));
    assert_eq!(::std::mem::align_of::<user_fpregs_struct>(), 8usize, concat!( "Alignment of ", stringify!( user_fpregs_struct ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).cwd as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( cwd ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).swd as *const _ as usize }, 2usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( swd ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).ftw as *const _ as usize }, 4usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( ftw ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).fop as *const _ as usize }, 6usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( fop ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).rip as *const _ as usize }, 8usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( rip ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).rdp as *const _ as usize }, 16usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( rdp ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).mxcsr as *const _ as usize }, 24usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( mxcsr ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).mxcr_mask as *const _ as usize }, 28usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( mxcr_mask ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).st_space as *const _ as usize }, 32usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( st_space ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).xmm_space as *const _ as usize }, 160usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( xmm_space ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_fpregs_struct>())).padding as *const _ as usize }, 416usize, concat!( "Offset of field: ", stringify!( user_fpregs_struct ), "::", stringify!( padding ) ));
}

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct user_regs_struct {
    pub r15: ::std::os::raw::c_ulonglong,
    pub r14: ::std::os::raw::c_ulonglong,
    pub r13: ::std::os::raw::c_ulonglong,
    pub r12: ::std::os::raw::c_ulonglong,
    pub rbp: ::std::os::raw::c_ulonglong,
    pub rbx: ::std::os::raw::c_ulonglong,
    pub r11: ::std::os::raw::c_ulonglong,
    pub r10: ::std::os::raw::c_ulonglong,
    pub r9: ::std::os::raw::c_ulonglong,
    pub r8: ::std::os::raw::c_ulonglong,
    pub rax: ::std::os::raw::c_ulonglong,
    pub rcx: ::std::os::raw::c_ulonglong,
    pub rdx: ::std::os::raw::c_ulonglong,
    pub rsi: ::std::os::raw::c_ulonglong,
    pub rdi: ::std::os::raw::c_ulonglong,
    pub orig_rax: ::std::os::raw::c_ulonglong,
    pub rip: ::std::os::raw::c_ulonglong,
    pub cs: ::std::os::raw::c_ulonglong,
    pub eflags: ::std::os::raw::c_ulonglong,
    pub rsp: ::std::os::raw::c_ulonglong,
    pub ss: ::std::os::raw::c_ulonglong,
    pub fs_base: ::std::os::raw::c_ulonglong,
    pub gs_base: ::std::os::raw::c_ulonglong,
    pub ds: ::std::os::raw::c_ulonglong,
    pub es: ::std::os::raw::c_ulonglong,
    pub fs: ::std::os::raw::c_ulonglong,
    pub gs: ::std::os::raw::c_ulonglong,
}

#[test]
fn bindgen_test_layout_user_regs_struct() {
    assert_eq!(::std::mem::size_of::<user_regs_struct>(), 216usize, concat!( "Size of: ", stringify!( user_regs_struct ) ));
    assert_eq!(::std::mem::align_of::<user_regs_struct>(), 8usize, concat!( "Alignment of ", stringify!( user_regs_struct ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r15 as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r15 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r14 as *const _ as usize }, 8usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r14 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r13 as *const _ as usize }, 16usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r13 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r12 as *const _ as usize }, 24usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r12 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rbp as *const _ as usize }, 32usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rbp ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rbx as *const _ as usize }, 40usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rbx ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r11 as *const _ as usize }, 48usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r11 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r10 as *const _ as usize }, 56usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r10 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r9 as *const _ as usize }, 64usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r9 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).r8 as *const _ as usize }, 72usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( r8 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rax as *const _ as usize }, 80usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rax ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rcx as *const _ as usize }, 88usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rcx ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rdx as *const _ as usize }, 96usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rdx ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rsi as *const _ as usize }, 104usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rsi ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rdi as *const _ as usize }, 112usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rdi ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).orig_rax as *const _ as usize }, 120usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( orig_rax ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rip as *const _ as usize }, 128usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rip ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).cs as *const _ as usize }, 136usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( cs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).eflags as *const _ as usize }, 144usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( eflags ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).rsp as *const _ as usize }, 152usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( rsp ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).ss as *const _ as usize }, 160usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( ss ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).fs_base as *const _ as usize }, 168usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( fs_base ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).gs_base as *const _ as usize }, 176usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( gs_base ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).ds as *const _ as usize }, 184usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( ds ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).es as *const _ as usize }, 192usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( es ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).fs as *const _ as usize }, 200usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( fs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user_regs_struct>())).gs as *const _ as usize }, 208usize, concat!( "Offset of field: ", stringify!( user_regs_struct ), "::", stringify!( gs ) ));
}

#[repr(C)]
#[derive(Copy, Clone)]
pub struct user { pub regs: user_regs_struct, pub u_fpvalid: ::std::os::raw::c_int, pub i387: user_fpregs_struct, pub u_tsize: ::std::os::raw::c_ulonglong, pub u_dsize: ::std::os::raw::c_ulonglong, pub u_ssize: ::std::os::raw::c_ulonglong, pub start_code: ::std::os::raw::c_ulonglong, pub start_stack: ::std::os::raw::c_ulonglong, pub signal: ::std::os::raw::c_longlong, pub reserved: ::std::os::raw::c_int, pub __bindgen_anon_1: user__bindgen_ty_1, pub __bindgen_anon_2: user__bindgen_ty_2, pub magic: ::std::os::raw::c_ulonglong, pub u_comm: [::std::os::raw::c_char; 32usize], pub u_debugreg: [::std::os::raw::c_ulonglong; 8usize] }

#[repr(C)]
#[derive(Copy, Clone)]
pub union user__bindgen_ty_1 { pub u_ar0: *mut user_regs_struct, pub __u_ar0_word: ::std::os::raw::c_ulonglong, _bindgen_union_align: u64 }

#[test]
fn bindgen_test_layout_user__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<user__bindgen_ty_1>(), 8usize, concat!( "Size of: ", stringify!( user__bindgen_ty_1 ) ));
    assert_eq!(::std::mem::align_of::<user__bindgen_ty_1>(), 8usize, concat!( "Alignment of ", stringify!( user__bindgen_ty_1 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user__bindgen_ty_1>())).u_ar0 as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user__bindgen_ty_1 ), "::", stringify!( u_ar0 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user__bindgen_ty_1>())).__u_ar0_word as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user__bindgen_ty_1 ), "::", stringify!( __u_ar0_word ) ));
}

#[repr(C)]
#[derive(Copy, Clone)]
pub union user__bindgen_ty_2 { pub u_fpstate: *mut user_fpregs_struct, pub __u_fpstate_word: ::std::os::raw::c_ulonglong, _bindgen_union_align: u64 }

#[test]
fn bindgen_test_layout_user__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<user__bindgen_ty_2>(), 8usize, concat!( "Size of: ", stringify!( user__bindgen_ty_2 ) ));
    assert_eq!(::std::mem::align_of::<user__bindgen_ty_2>(), 8usize, concat!( "Alignment of ", stringify!( user__bindgen_ty_2 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user__bindgen_ty_2>())).u_fpstate as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user__bindgen_ty_2 ), "::", stringify!( u_fpstate ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user__bindgen_ty_2>())).__u_fpstate_word as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user__bindgen_ty_2 ), "::", stringify!( __u_fpstate_word ) ));
}

#[test]
fn bindgen_test_layout_user() {
    assert_eq!(::std::mem::size_of::<user>(), 912usize, concat!( "Size of: ", stringify!( user ) ));
    assert_eq!(::std::mem::align_of::<user>(), 8usize, concat!( "Alignment of ", stringify!( user ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).regs as *const _ as usize }, 0usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( regs ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_fpvalid as *const _ as usize }, 216usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_fpvalid ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).i387 as *const _ as usize }, 224usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( i387 ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_tsize as *const _ as usize }, 736usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_tsize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_dsize as *const _ as usize }, 744usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_dsize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_ssize as *const _ as usize }, 752usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_ssize ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).start_code as *const _ as usize }, 760usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( start_code ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).start_stack as *const _ as usize }, 768usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( start_stack ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).signal as *const _ as usize }, 776usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( signal ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).reserved as *const _ as usize }, 784usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( reserved ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).magic as *const _ as usize }, 808usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( magic ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_comm as *const _ as usize }, 816usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_comm ) ));
    assert_eq!(unsafe { &(*(::std::ptr::null::<user>())).u_debugreg as *const _ as usize }, 848usize, concat!( "Offset of field: ", stringify!( user ), "::", stringify!( u_debugreg ) ));
}
